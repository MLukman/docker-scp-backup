#!/bin/bash

source "$(dirname $0)/fn"

FORCE=0

if [ "$#" -gt 0 ]; then
   while getopts :f opt; do
      case $opt in
         f)
            FORCE=1
            ;;
         \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
         :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
      esac
   done
   shift $((OPTIND -1))
fi

if [ $# -lt 1 ]; then
        echo "ERROR: Usage $0 <backup_id> [backup_filename [dest_path]]"
	echo Backup ID is one of the following:
        find $CFGDIR -maxdepth 1 -type f -exec basename {} \;
        exit 1
fi

BAK_ID="$1"

if [[ ! -f "$CFGDIR/$BAK_ID" ]]; then
        echo ERROR: Backup ID $BAK_ID does not exists!
        exit 1
fi

source "$CFGDIR/$BAK_ID"

SCP_OPTIONS="-oStrictHostKeyChecking=no"
if [[ ! -z "$BAK_SCP_PKEY" ]]; then
	SCP_OPTIONS="$SCP_OPTIONS -i $BAK_SCP_PKEY"
fi

if [ $# -lt 2 ]; then
	info Backup filename is not specified. Script will now connect to the SCP server to retrieve a list of possible backup files ...

	BAK_ARC_WC=$BAK_ARC
	re='(.*)%[A-Za-z]+(.*)'
	while [[ $BAK_ARC_WC =~ $re ]]; do
		BAK_ARC_WC=${BASH_REMATCH[1]}*${BASH_REMATCH[2]}
	done
	re='(.*)[*]{2}(.*)'
	while [[ $BAK_ARC_WC =~ $re ]]; do
		BAK_ARC_WC=${BASH_REMATCH[1]}*${BASH_REMATCH[2]}
	done

	echo
	ssh $SCP_OPTIONS -T -p "$BAK_SCP_PORT" $BAK_SCP_USER@$BAK_SCP_HOST  <<< ```
   		echo cd $BAK_SCP_PATH
   		echo "ls -lah $BAK_ARC_WC.tar.gz"
   		echo exit
		```

	echo ; echo Please choose a filename from the list and re-run as:
	echo $0 $BAK_ID filename [dest_path]
	exit
fi

BAK_FILE="$2"
DEST_PATH=${3:-$BAK_PATH}

if [[ ! -d "$DEST_PATH" ]]; then
	mkdir -p "$DEST_PATH"
elif [[ ! -z "$(ls -A $DEST_PATH)" ]] && [ "$FORCE" -eq 0 ]; then
	echo ERROR: Destination directory $DEST_PATH is not empty. Please provide an empty destination directory or provide option -f to force the script to empty the destination directory before un-tar.
	exit 1
fi

info "Downloading $BAK_FILE from $BAK_SCP_USER@$BAK_SCP_HOST:$BAK_SCP_PORT ..."
scp $SCP_OPTIONS -P "$BAK_SCP_PORT" "$BAK_SCP_USER@$BAK_SCP_HOST:$BAK_SCP_PATH/$BAK_FILE" /tmp/

info "Verifying if $BAK_FILE is a valid tar.gz file ..."
tar Ozxf "/tmp/$BAK_FILE" > /dev/null || { echo "$BAK_FILE is not a valid tar.gz file!" ; exit 1 ; }

if [[ ! -z "$(ls -A $DEST_PATH)" ]]; then
	info Emptying $DEST_PATH ...
	rm -fr $DEST_PATH/*
fi

info "Restoring $BAK_FILE into $DEST_PATH ..."
tar -pzxf "/tmp/$BAK_FILE" -C "$DEST_PATH"

info "Completed. Listing $DEST_PATH:"
ls -lah "$DEST_PATH"
